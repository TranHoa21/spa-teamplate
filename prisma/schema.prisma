generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String            @id @default(uuid())
  email     String            @unique
  password  String
  name      String?
  role      Role              @default(CUSTOMER)
  createdAt DateTime          @default(now())

  bookings     Booking[]         // Các đơn đặt tour của người dùng
  messages     ContactMessage[]  @relation("UserMessages") // Tin nhắn liên hệ
  comments     Comment[]
  notifications Notification[]
}

enum Role {
  ADMIN
  CUSTOMER
}
model Tour {
  id            String        @id @default(cuid())
  name          String
  slug          String        @unique
  address       String
  description   String
  duration      Int
  maxGuests     Int
  price         Float
  image         String
  included      String[]
  notIncluded   String[]

  days          TourInDay[]   @relation("TourDaysBySlug") // 
  bookings      BookingItem[]
  reviews       Testimonial[]
  parkId String?
park   Park?   @relation(fields: [parkId], references: [id])
}

model TourInDay {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  slugTour    String   // Khóa ngoại
  image       String?
  description String

  tour        Tour     @relation("TourDaysBySlug", fields: [slugTour], references: [slug])
}

model Testimonial {
  id       String @id @default(uuid())
  rating   Int    // 1–5
  comment  String
  customer String
  tourId   String
  tour     Tour   @relation(fields: [tourId], references: [id])
}

model Booking {
  id            String         @id @default(uuid())
  totalPrice    Float
  status        BookingStatus  @default(PENDING)
  createdAt     DateTime       @default(now())
  name          String
  email         String
  phone         String
  paymentMethod String
  transactionNo String?
  paymentTime   DateTime?

  userId        String?
  user          User?          @relation(fields: [userId], references: [id])
  bookingItems  BookingItem[]
  notifications Notification[] // Notification liên quan
  paymentLog PaymentLog[]
}

enum BookingStatus {
  PENDING
  PAID
  CONFIRMED
  COMPLETED
  CANCELLED
}

model BookingItem {
  id        String  @id @default(uuid())
  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id])

  tourId    String
  tour      Tour    @relation(fields: [tourId], references: [id])

  quantity  Int     @default(1)
  price     Float
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())

  userId    String?
  user      User?    @relation("UserMessages", fields: [userId], references: [id])
}

model Post {
  id              String   @id @default(uuid())
  title           String
  slug            String   @unique
  excerpt         String?
  content         String
  imageUrl        String?
  metaTitle       String?
  metaDescription String?
  keywords        String?
  canonicalUrl    String?
  published       Boolean  @default(false)
  status          String   @default("draft")
  featured        Boolean  @default(false)
  likes           Int      @default(0)
  views           Int      @default(0)
  readingTime     Int?
  postType        String   @default("article")

  categoryId      String?
  category        Category? @relation("CategoryPosts", fields: [categoryId], references: [id]) // Quan hệ Category
  tags            Tag[]     @relation("PostTags")  // Quan hệ Tag

  images          PostImage[] // Quan hệ với PostImage
  comments        Comment[]   // Quan hệ với Comment
  viewsLog        PostView[] // Quan hệ với PostView

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}


model PostImage {
  id        Int      @id @default(autoincrement()) // ID duy nhất, tự động tăng
  imageUrl  String // URL của hình ảnh
  altText   String? // Mô tả cho hình ảnh (alt text), có thể NULL
  createdAt DateTime @default(now()) // Thời gian tạo
  updatedAt DateTime @updatedAt // Thời gian cập nhật

  // Nếu bạn muốn liên kết với bảng `Post` (ví dụ bài viết)
  postId String? // ID bài viết liên kết (có thể NULL nếu không có)
  post   Post?   @relation(fields: [postId], references: [id]) // Quan hệ với bảng Post
}

model Category {
  id    String  @id @default(uuid())
  name  String  @unique
  slug  String  @unique
  posts Post[]  @relation("CategoryPosts") // Quan hệ ngược lại từ Category tới Post
}
model Tag {
  id    String @id @default(uuid())
  name  String @unique
  slug  String @unique

  // Sửa tại đây
  posts Post[] @relation("PostTags")
}


model Comment {
  id        String   @id @default(uuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId    String?
  user      User?    @relation(fields: [userId], references: [id])

  content   String
  status    String   @default("pending")
  createdAt DateTime @default(now())
}

model PostView {
  id        String   @id @default(uuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  ip        String
  userAgent String
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  content   String
  seen      Boolean  @default(false)
  createdAt DateTime @default(now())

  userId    String
  user      User     @relation(fields: [userId], references: [id])

  bookingId String
  booking   Booking  @relation(fields: [bookingId], references: [id])
}

model PaymentLog {
  id          String   @id @default(uuid())
  bookingId  String
  booking    Booking  @relation(fields: [bookingId], references: [id])

  method      String
  status      String
  amount      Float
  transactionNo String?
  response    String?
  createdAt   DateTime @default(now())
}

model FAQ {
  id        String   @id @default(uuid())
  question String
  answer   String
  createdAt DateTime @default(now())
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String
  date        DateTime
  location    String
  image       String?
  createdAt   DateTime @default(now())
}

model Subscriber {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model Donation {
  id            String   @id @default(uuid())
  name          String
  email         String
  amount        Float
  message       String?
  paymentMethod String
  transactionNo String?
  paymentTime   DateTime?
  createdAt     DateTime @default(now())
}

model ImageByPark {
  id        String   @id @default(uuid())
  imageUrl  String
  altText   String?
  parkId    String?
  park      Park?     @relation(fields: [parkId], references: [id])
  createdAt DateTime @default(now())
}

model Park {
  id          String       @id @default(uuid())
  name        String
  slug        String       @unique
  description String
  location    String
  image       String?
  createdAt   DateTime     @default(now())
  zoneId      String
  zone        Zone         @relation(fields: [zoneId], references: [id])
  tours       Tour[]
  images      ImageByPark[] // Mối quan hệ với bảng ImageByPark
}

model Zone {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  parks     Park[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
